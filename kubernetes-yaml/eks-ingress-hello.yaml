---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-eks
spec:
  replicas: 1
  selector:
    matchLabels:
      app_version: hello-eks
  template:
    metadata:
      labels:
        app: hello
        app_version: hello-eks
    spec:
      containers:
      - name: hello-eks
        image: rancher/hello-world
        ports:
        - containerPort: 80
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: hello
spec:
  type: NodePort
  selector:
    app: hello
  ports:
    - port: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: default
  name: hello
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing #Places the load balancer on public subnets
    alb.ingress.kubernetes.io/target-type: ip #The Pod IPs should be used as the target IPs (rather than the node IPs as was the case with NLB in hte previous section)
    alb.ingress.kubernetes.io/group.name: my-group # Groups multiple Ingress resources
    #alb.ingress.kubernetes.io/certificate-arn: {CERTIFICATE}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    #alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'

spec:
  ingressClassName: alb # kubectl get ingressclass
  rules:
  - http:
      paths:      
      - path: /hello
        pathType: Prefix
        backend:
          service:
            name: hello
            port:
              number: 80